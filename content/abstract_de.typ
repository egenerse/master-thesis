Die alten Projekte Apollon und Apollon Standalone stützten sich stark auf React-Klassenkomponenten, Redux und Redux-Saga, was zu einer erheblichen Komplexität führte und die Wartung, Skalierung und Erweiterung des Systems zunehmend erschwerte. Die separaten Repositories für die Apollon-Bibliothek, den Standalone-Webclient und -Server sowie eine eigenständige Swift-basierte mobile App machten die Zusammenarbeit, die Wiederverwendung von Code und die Entwicklung zunehmend ineffizient.

In dieser Arbeit wird ein komplettes Reengineering des Systems vorgestellt, um den Entwicklungsworkflow zu vereinheitlichen und zu modernisieren und die Benutzerfreundlichkeit zu verbessern. Alle Repositories werden in einer Monorepo zusammengeführt und zentral verwaltet. Zu den wichtigsten Verbesserungen gehören die Umstellung auf funktionale React-Komponenten mit Hooks, die Einführung von Zustand für ein leichtgewichtiges Zustandsmanagement und die Integration von Yjs für die Zusammenarbeit in Echtzeit. Die React Flow Bibliothek bildet nun den Kern des Diagrammeditors und ermöglicht die Erstellung von reichhaltigen, interaktiven Diagrammen mit benutzerdefinierten Knoten und Kanten. Die neu gestaltete gemeinsame Bibliothek wird als eigenständiges npm-Paket veröffentlicht und in Anwendungen wie Apollon Standalone und Artemis wiederverwendet. Für mobile Anwendungen wird die Webanwendung mit Capacitor ummantelt, was die Unterstützung von iOS und Android ohne eine separate native App ermöglicht.

Während einige fortschrittliche Funktionen des alten Systems, wie die vollständige Abdeckung von Diagrammtypen, granulare Exportoptionen, optimierte Dokumentensynchronisierung und verbesserte UI-Interaktionen, noch in der Entwicklung sind, bietet die neue Architektur bereits mehrere Funktionen, die zuvor nicht verfügbar waren. Durch die Nutzung von React Flow unterstützt das System jetzt eine unendliche Leinwand, sanftes Zoomen per Mausscroll und optionale UI-Komponenten wie eine Minimap für eine bessere Diagrammnavigation. Diese Verbesserungen, zusammen mit dem Gewinn an Wartbarkeit, Modularität und plattformübergreifender Konsistenz, zeigen, dass das überarbeitete System nicht nur die alte Architektur modernisiert, sondern auch ihr Potenzial erweitert. Die bisher geschaffene Grundlage ist sowohl skalierbar als auch zukunftssicher und unterstützt den weiteren Fortschritt hin zu einer vollständigen und robusten Lösung.
