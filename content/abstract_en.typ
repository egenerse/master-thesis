// Note:
  // 1. *paragraph:* What is the motivation of your thesis? Why is it interesting from a scientific point of view? Which main problem do you like to solve?
  // 2. *paragraph:* What is the purpose of the document? What is the main content, the main contribution?
  // 3. *paragraph:* What is your methodology? How do you proceed?

The old Apollon and Apollon Standalone projects relied heavily on React class components, Redux, and Redux-Saga, introducing significant complexity and making the system increasingly difficult to maintain, scale, and extend. Its separate repositories for the Apollon library, the Standalone web client and server, and a standalone Swift-based mobile app made collaboration, code reuse, and development increasingly inefficient.

This thesis presents a complete reengineering of the system to unify and modernize the development workflow and improve user experience. All repositories are merged into one monorepo and centralized management. Key improvements include migrating to React functional components with Hooks, adopting Zustand for lightweight state management, and integrating Yjs for real-time collaboration. React Flow library now forms the core of the diagram editor, allowing the creation of rich, interactive diagrams with custom nodes and edges. The redesigned shared library is published as a standalone npm package and reused across applications like Apollon Standalone and Artemis. For mobile application, the web application is wrapped using Capacitor, enabling iOS and Android support without a separate native app.

While some advanced features from the legacy system such as full diagram type coverage, granular export options, optimized document syncing, and enhanced UI interactions are still under development, the new architecture already introduces several capabilities that were previously unavailable. By leveraging React Flow, the system now supports an infinite canvas, smooth zooming via mouse scroll, and optional UI components like a minimap for better diagram navigation. These improvements, along with gains in maintainability, modularity, and cross-platform consistency, demonstrate that the reengineered system is not only modernizing the old architecture but also extending its potential. The foundation built so far is both scalable and future-proof, supporting continued progress toward a complete and robust solution.